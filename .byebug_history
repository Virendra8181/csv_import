c!
 crime_report_values
n
 crime_report_values
n
 crime_report_values
n
 crime_report_values
n
 crime_report_values
n
 crime_report_values
n
 crime_report_values
n
 crime_report_values
n
 crime_report_values
n
crime_report_values
n
crime_report_values
n
crime_report_values
n
crime_report_values
n
crime_report_values
n
 n
crime_report_values
n
@city.present?
n
@city.present?
n
State.find_by(state_code: row["state_code"]).present?
n
c!
crime_report.each { |key,val| puts  val}
crime_report.each { |key,val| puts  key}
crime_report.each { |i| key}
crime_report.each_with_index { |key ,val| puts val}
crime_report.each_with_index { |key ,val| puts key}
crime_report.each_with_index { |key ,val| puts val}
crime_report.each_with_index { |key ,val| puts key}
n
continue
c!
n
City.find_by(identification_code: row["identification_code"]).present?
c
City.create!(city_info)
n
City.find_by(identification_code: row["identification_code"]).present?
n
c
n
c
State.new
state
 header= ["state","state_code","city_name","identification_code"]
n
c!
n
c!
n
c!
n
c
c!\
n
c!
State.find_by(states_code:41)
row
State.find_by(states_code:99)
State.find(states_code:99)
State.find(33)
State.last
State.find_by(state_code:41)
State.find(state_code:41)
row
row["identification_code"]
City.find_by(identification_code: row["identification_code"])
City.find_by(identification_code: row["identification_code"]).present?
n
City.find_by(identification_code: row["identification_code"]).present?
c
n
c!
n
c!
City.last
City.find_by(identification_code: row["identification_code"])
City.find_by(identification_code: row["identification_code"]).present?
n
City.all
City.find_by(identification_code: row["identification_code"])
City.find_by(identification_code: row["identification_code"]).present?
n
City.find_by(identification_code: row["identification_code"]).present?
n
State.find_by(states_code: row["states_code"]).present?
nState.find_by(states_code: row["states_code"]).present?
n
c!
continue
City.find_by(city_name:row["identification_code"]).present?
n
State.find_by(states_code:row["states_code"]).present?
State.find_by(states_code:row["states_code"]).present
n
c!
State.find_by(states_code:row["states_code"]).present?
n
row["states_code"]
State.find_by(states_code:row["states_code"]).present?
nState.find_by(states_code:row["states_code"]).present?
n
c!
continue
row["state_code"]
State.find_by(states_code:row["state_code"])
State.find_by(states_code:row["state_code"]).present?
n
State.find_by(states_code:row["state_code"]).present?
nState.find_by(states_code:row["state_code"]).present?
n
c!
State.find_by(states_code:row["state_code"]).present?
n
State.find_by(states_code:row["state_code"]).present?
n
c!
State.create(state_info) unless State.find_by(states_code:row["state_code"]).present?
State.find_by(states_code:row["state_code"]).present?
n
c!
State.all.to_json
State.all
State.all.json
State.all.hash
State.count
State.all
State.create!(state_info)
n
State.create!(state_info)
n
c!
c
 State.create!(state_info)
 State.all
 State.find_by(states_code:row["state_code"]).present?
state_info
n
c
n
c!
  "state_code" => data["states_code"]
  "state" => data["states"],
state_info = {
row
row'
State.find_by(states_code:row["state_code"]).present?
n
row = Hash[[header, data.row(i)].transpose]
n
c
n
c
n
c
n
c
c!
n
\n
c
n
c!
header
n
c!
nc!
n
c!
1..data.last_row
n
c!
c
2..data.last_row
1..data.last_row
n
c
data.row(1)
n
header = data.row(1)
n
c!
c
c!
c
n
c!
c
n
row = Hash[[header, data.row(i)].transpose]
n
 row = Hash[[header, data.row(i)].transpose]
n
row = Hash[[header, data.row(i)].transpose]
n
row = Hash[[header, data.row(i)].transpose]
n
 header = data.row(1)
n
c!
c
 row = Hash[[header, data.row(i)].transpose]
n
row = Hash[[header, data.row(i)].transpose]
n
row = Hash[[header, data.row(i)].transpose]
c
 row = Hash[[header, data.row(i)].transpose]
n
c!
c
n
 row = Hash[[header, data.row(i)].transpose]
n
row = Hash[[header, data.row(i)].transpose]
n
row = Hash[[header, data.row(i)].transpose]
n
row = Hash[[header, data.row(i)].transpose]
n
row = Hash[[header, data.row(i)].transpose]
n
row = Hash[[header, data.row(i)].transpose]
n
row = Hash[[header, data.row(i)].transpose]
n
row = Hash[[header, data.row(i)].transpose]
n
row = Hash[[header, data.row(i)].transpose]
n
row = Hash[[header, data.row(i)].transpose]
n
row = Hash[[header, data.row(i)].transpose]
n
header = data.row(2)
header = data.row(1)
n
c
data = Roo::Spreadsheet.open(params[:xlsx_path])
